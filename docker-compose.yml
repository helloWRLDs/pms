version: "3.9"

services:
  # frontend:
  #   container_name: frontend
  #   build:
  #     context: ./services/frontend
  #     dockerfile: Dockerfile
  #   ports:
  #     - "80:80"
  #   networks:
  #     - webnet
  #   depends_on:
  #     - api-gateway
  #   restart: unless-stopped

  auth-service:
    container_name: auth-service
    build:
      context: .
      dockerfile: Dockerfile
      target: auth-service
    ports:
      - "50051:50051"
    environment:
      - POSTGRES_HOST=pg-pms
      - POSTGRES_PORT=5432
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=auth
      - POSTGRES_SSL_MODE=disable
    networks:
      - webnet
    restart: unless-stopped

  analytics-service:
    container_name: analytics-service
    build:
      context: .
      dockerfile: Dockerfile
      target: analytics-service
    ports:
      - "50054:50054"
    environment:
      - HOST=:50054
      - POSTGRES_HOST=pg-pms
      - POSTGRES_PORT=5432
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=analytics
      - POSTGRES_SSL_MODE=disable
      - LOG_LEVEL=debug
      - PROJECT_HOST=project-service:50053
      - PROJECT_DISABLE_LOG=true
    networks:
      - webnet
    restart: unless-stopped

  project-service:
    container_name: project-service
    build:
      context: .
      dockerfile: Dockerfile
      target: project-service
    ports:
      - "50052:50052"
    environment:
      - POSTGRES_HOST=pg-pms
      - POSTGRES_PORT=5432
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=project
      - POSTGRES_SSL_MODE=disable
    networks:
      - webnet
    restart: unless-stopped

  api-gateway:
    container_name: api-gateway
    build:
      context: .
      dockerfile: Dockerfile
      target: api-gateway
    ports:
      - "8080:8080"
    environment:
      - HOST=0.0.0.0:8080
      - LOG_DEV=true
      - LOG_LEVEL=info
      - LOG_FILE_OUTPUT=false
      - LOG_FILE_PATH=
      - LOG_STACKTRACE=true
      - LOG_CALLER=true
      - LOG_NOTIFICATION_CONNECTOR_DISABLED=true
      - LOG_AUTH_CONNECTOR_DISABLED=true
      - LOG_PROJECT_CONNECTOR_DISABLED=true
      - REDIS_HOST=redis-pms:6379
      - REDIS_PASSWORD=
      - AUTH_HOST=auth-service:50051
      - AUTH_DISABLE_LOG=true
      - PROJECT_HOST=project-service:50052
      - PROJECT_DISABLE_LOG=true
      - ANALYTICS_HOST=analytics-service:50054
      - ANALYTICS_DISABLE_LOG=true
      - NOTIFICATION_DSN=amqp://guest:guest@rabbitmq:5672/
      - NOTIFICATION_EXCHANGE=direct-exchange
      - NOTIFICATION_DISABLE_LOG=true
      - JWT_TTL=24
      - JWT_SECRET=secret
    networks:
      - webnet
    restart: unless-stopped

  notifier-service:
    container_name: notifier-service
    build:
      context: .
      dockerfile: Dockerfile
      target: notifier-service
    ports:
      - "50055:50055"
    networks:
      - webnet
    restart: unless-stopped

  pg-pms:
    container_name: pg-pms
    image: postgres:16.4
    restart: unless-stopped
    environment:
      POSTGRES_PASSWORD: postgres
      POSTGRES_USER: postgres
      POSTGRES_DB: postgres
    volumes:
      - pg_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - webnet

  redis-pms:
    image: redis:7.0.8
    container_name: redis-pms
    restart: unless-stopped
    ports:
      - 6379:6379
    volumes:
      - ./redis.conf:/usr/local/etc/redis/redis.conf
    command:
      - "redis-server"
    networks:
      - webnet

  rabbitmq:
    image: rabbitmq:3.10.7-management
    container_name: rabbitmq
    restart: unless-stopped
    ports:
      - 5672:5672
      - 15672:15672
    networks:
      - webnet

networks:
  webnet:
    driver: bridge

volumes:
  pg_data:
    driver: local
